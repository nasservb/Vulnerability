<?php

namespace Tests\Feature\Api;

use \Illuminate\Foundation\Testing\RefreshDatabase;
use \Illuminate\Foundation\Testing\WithFaker;
use \Database\Factories\VulnerabilityFactory;
use \Database\Factories\UserFactory;
use App\Domains\Vulnerability\Models\Vulnerability;
use Tests\TestCase;

class VulnerabilitiesTest extends TestCase
{
    use RefreshDatabase,WithFaker;

    public function setup():void
    {
        parent::setUp();
        $user = (new UserFactory())->create();
        $this->actingAs($user);
    }

    /**
     * @test
     * @dataProvider createValidationData
     */
    public function ItShouldBeAcceptValidDataForCreate($title,$description,$responseCode)
    {
        $response= $this->postJson(route('api.vulnerability.create'),[
            'title'=>$title,
            'description'=>$description
        ]);
        $response->assertStatus($responseCode);
    }

    /**
     * provide test data for create and edit validation
     *
     * @return array[]
     */
    public function createValidationData(): array
    {
        $this->refreshApplication();
        $this->setUpFaker();
        return [
            ['title','description',201],
            ['','',422],
            ['t','',422],
            ['test','',201],
            ['a','a',422],
            [$this->faker->text(500),'',422],
            ['test',$this->faker->text(1500),422],
            [null,null,422],
            ['test',null,201]
            ];
    }

    /**
     * @test
     */
    public function ItCanBeAddItemToDatabaseAfterCreate()
    {

        $user = (new UserFactory())->create();
        $this->actingAs($user);

        $data = ['title'=>$this->faker->name(),'description'=>$this->faker->text(100)];

        $response= $this->postJson(route('api.vulnerability.create'),$data);
        $response->assertStatus(201);

        $this->assertDatabaseCount(Vulnerability::class,1);

    }

    /**
     * @test
     */
    public function ItCanShowAllItemWhenCallIndex()
    {
        (new VulnerabilityFactory(100))->create();

        $response= $this->get(route('api.vulnerability.index'));

        $response->assertStatus(200);
        $response->assertJsonStructure([
                'data' => [
                    [
                        'id',
                        'title',
                        'description',
                    ]
                ],
                'links'=>[
                    'first',
                    'last',
                    'prev',
                    'next'
                ],
                'meta'=>[
                    'current_page',
                    'from',
                    'last_page',
                    'links',
                    'path',
                    'per_page',
                    'to',
                    'total',
                ]

        ]);

        $this->assertEquals(100,json_decode($response->getContent(),1)['meta']['total']);

    }

    /**
     * @test
     */
    public function ItCanShowItemDataAfterShow()
    {
        $item= (new VulnerabilityFactory())->create();

        $response= $this->get(route('api.vulnerability.show',$item->id));

        $response->assertStatus(200);
        $this->assertJson(json_encode([
            'id'=> $item->id,
            'title'=> $item->title,
            'description'=> $item->description,
        ]),$response->getContent());

        $response= $this->get(route('api.vulnerability.show',$item->id+1));

        $response->assertStatus(404);

    }

    /**
     * @test
     * @dataProvider editValidationData
     */
    public function ItShouldBeAcceptValidDataForEdit($title,$description,$responseCode)
    {
        $item= (new VulnerabilityFactory())->create();
        $response= $this->put(route('api.vulnerability.edit',$item->id),[
            'title'=>$title,
            'description'=>$description
        ]);
        $response->assertStatus($responseCode);
    }

    /**
     * provide test data for create and edit validation
     *
     * @return array[]
     */
    public function editValidationData(): array
    {
        $this->refreshApplication();
        $this->setUpFaker();
        return [
            ['title','description',200],
            ['','',302],
            ['t','',302],
            ['test','',200],
            ['a','a',302],
            [$this->faker->text(300),'',302],
            ['test',$this->faker->text(1500),302],
            [null,null,302],
            ['test',null,200]
        ];
    }

    /**
     * @test
     */
    public function ItCanBeEditItemAfterEdit()
    {
        $item= (new VulnerabilityFactory())->create();

        $data=[
            'title'=>$this->faker->name(),
            'description'=>$this->faker->text()
        ];
        $response= $this->put(route('api.vulnerability.edit',$item->id),$data);

        $response->assertStatus(200);

        $item->refresh();
        $this->assertEquals($item->title,$data['title']);
        $this->assertEquals($item->description,$data['description']);

    }


    /**
     * @test
     */
    public function ItCanBeDeleteItemAfterDelete()
    {
        $item= (new VulnerabilityFactory())->create();

        $response= $this->delete(route('api.vulnerability.delete',$item->id));

        $response->assertStatus(200);

        $this->assertDatabaseMissing(Vulnerability::class,[[
            'id'=> $item->id,
            'title'=> $item->title,
            'description'=> $item->description,
        ]]);
    }

}

